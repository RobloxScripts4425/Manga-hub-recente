local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Manga Hub 4.2.1 - hackmod_01299",
    SubTitle = "by hackmod_01299",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Audio = Window:AddTab({ Title = "Áudio", Icon = "" }),
    TrollMap = Window:AddTab({ Title = "Troll de Mapa", Icon = "" })
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Função para reproduzir áudio para os outros jogadores
local function playAudioForOthers(audioId)
    local sniper = LocalPlayer.Character:FindFirstChild("Sniper")
    if sniper then
        local args = {
            [1] = audioId,
            [2] = sniper
        }
        ReplicatedStorage.RE:FindFirstChild("1Too1l"):InvokeServer(unpack(args))
    else
        print("A Sniper precisa estar equipada para tocar o áudio.")
    end
end

-- TextBox para ID de Áudio
local audioIdInput = Tabs.Audio:AddInput("AudioID", {
    Title = "ID do Áudio",
    Default = "",
    Placeholder = "Coloque o ID do áudio aqui",
    Callback = function(value)
        print("ID do áudio atualizado:", value)
    end
})

-- Botão para ativar áudio
Tabs.Audio:AddButton({
    Title = "Ativar Áudio",
    Description = "Ativa o áudio para os jogadores próximos.",
    Callback = function()
        local audioId = audioIdInput.Value
        if audioId and audioId ~= "" then
            playAudioForOthers(audioId)
        else
            print("Por favor, insira um ID de áudio válido.")
        end
    end
})

-- Variável para controlar o estado do Noclip
local noclipEnabled = false

-- Função para ativar/desativar Noclip
local function setNoclip(enabled)
    noclipEnabled = enabled
    if enabled then
        for _, part in ipairs(LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
        print("Noclip ativado.")
    else
        for _, part in ipairs(LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
        print("Noclip desativado.")
    end
end

-- Toggle para Noclip
local noclipToggle = Tabs.TrollMap:AddToggle("NoclipToggle", {
    Title = "Noclip",
    Default = false
})

noclipToggle:OnChanged(function()
    setNoclip(noclipToggle.Value)
end)

-- Botão de apagar o mapa
Tabs.TrollMap:AddButton({
    Title = "Apagar Mapa",
    Description = "Apaga o mapa.",
    Callback = function()
        local success, err = pcall(function()
            for _, part in ipairs(workspace:GetChildren()) do
                if part:IsA("BasePart") and part.Name ~= "Baseplate" then
                    part.Transparency = 1
                    part.CanCollide = false
                end
            end
        end)
        if not success then
            print("Erro ao apagar o mapa: " .. err)
        end
    end
})

-- Botão de restaurar o mapa
Tabs.TrollMap:AddButton({
    Title = "Restaurar Mapa",
    Description = "Restaura o mapa.",
    Callback = function()
        local success, err = pcall(function()
            for _, part in ipairs(workspace:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    part.CanCollide = true
                end
            end
        end)
        if not success then
            print("Erro ao restaurar o mapa: " .. err)
        end
    end
})

-- Adicionando as funcionalidades de salvamento
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("MangaHub")
SaveManager:SetFolder("MangaHub/Configs")

InterfaceManager:BuildInterfaceSection(Tabs.Audio)
SaveManager:BuildConfigSection(Tabs.Audio)

InterfaceManager:BuildInterfaceSection(Tabs.TrollMap)
SaveManager:BuildConfigSection(Tabs.TrollMap)

Fluent:Notify({
    Title = "Manga Hub",
    Content = "O script foi carregado com sucesso.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()

-- Criando o botão "Z"
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 50, 0, 50)
toggleButton.Position = UDim2.new(1, -60, 1, -60) -- Posição no canto inferior direito
toggleButton.Text = "Z"
toggleButton.TextSize = 24
toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Cor vermelha
toggleButton.BorderSizePixel = 0
toggleButton.Parent = screenGui

-- Controlando a visibilidade do hub
toggleButton.MouseButton1Click:Connect(function()
    if Window.Visible then
        Window:Hide()
    else
        Window:Show()
    end
end)

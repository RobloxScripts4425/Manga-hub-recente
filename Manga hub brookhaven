local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Manga Hub 4.2.1",
    SubTitle = "by hackmod_01299",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Audio = Window:AddTab({ Title = "Áudio", Icon = "volume" }),
    MapTroll = Window:AddTab({ Title = "Troll de Mapa", Icon = "map" })
}

local Options = Fluent.Options

-- Função de notificação
Fluent:Notify({
    Title = "Manga Hub",
    Content = "O script foi carregado com sucesso.",
    Duration = 5
})

-- Toggle para Noclip
local noclipToggle = Tabs.MapTroll:AddToggle("Noclip", { Title = "Noclip", Default = false })
noclipToggle:OnChanged(function(value)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    if value then
        while noclipToggle.Value do
            humanoidRootPart.CanCollide = false
            wait(0.1)
        end
    else
        humanoidRootPart.CanCollide = true
    end
end)

-- Botão de apagar o mapa
local eraseMapButton = Tabs.MapTroll:AddButton({
    Title = "Apagar Mapa",
    Description = "Apaga todas as partes do mapa.",
    Callback = function()
        local success, err = pcall(function()
            for _, part in ipairs(workspace:GetChildren()) do
                if part:IsA("BasePart") and part.Name ~= "Baseplate" then
                    part.Transparency = 1
                    part.CanCollide = false
                end
            end
        end)
        if not success then
            print("Erro ao apagar o mapa: " .. err)
        end
    end
})

-- Botão de restaurar o mapa
local restoreMapButton = Tabs.MapTroll:AddButton({
    Title = "Restaurar Mapa",
    Description = "Restaura todas as partes do mapa.",
    Callback = function()
        local success, err = pcall(function()
            for _, part in ipairs(workspace:GetChildren()) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    part.CanCollide = true
                end
            end
        end)
        if not success then
            print("Erro ao restaurar o mapa: " .. err)
        end
    end
})

-- Função para reproduzir áudio
local function playAudioForOthers(audioId)
    local player = game.Players.LocalPlayer
    local args = {
        [1] = audioId,
        [2] = player.Character.Humanoid:FindFirstChild("Sniper")
    }
    game.ReplicatedStorage.RE:FindFirstChild("1Too1l"):InvokeServer(unpack(args))
end

-- TextBox para inserir o ID do áudio
local audioIdInput = Tabs.Audio:AddInput("AudioID", {
    Title = "ID do Áudio",
    Default = "Insira o ID do áudio aqui",
    Placeholder = "ID do Áudio",
    Numeric = true, -- Apenas permite números
    Finished = true, -- Chama o callback quando você pressiona Enter
    Callback = function(Value)
        print("ID do áudio atualizado:", Value)
        Options.AudioID = Value -- Armazena o ID do áudio nas opções
    end
})

-- Botão para ativar áudio
local audioButton = Tabs.Audio:AddButton({
    Title = "Ativar Áudio",
    Description = "Reproduz áudio para jogadores próximos.",
    Callback = function()
        local audioId = Options.AudioID or "ID_DO_AUDIO_AQUI" -- Usa o ID armazenado ou um padrão
        if audioId then
            playAudioForOthers(audioId)
        else
            print("Por favor, insira um ID de áudio válido.")
        end
    end
})

-- Adicionando a aba de configurações e salvamento
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- Carregando configuração
SaveManager:LoadAutoloadConfig()

print("Manga Hub carregado com sucesso.")
